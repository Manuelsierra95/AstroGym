---
import { calendar, type Days, type CalendarClass } from '@/data/calendar-data'

const days = Object.keys(calendar) as Days[]
const firstDay = days[0]
const classes = calendar[firstDay]
const timeSlots = Array.isArray(classes) ? classes : []
const headers = ['Horario', ...days.map((day) => day.slice(0, 3))]
---

<section id="Calendar" class="border-white/20 border-b">
  <div class="mx-auto p-8 border-white/20 border-x max-w-7xl">
    <div class="mb-8">
      <p class="text-white font-display uppercase text-3xl lg:text-6xl">Horarios</p>
    </div>
    {/* Web */}
    <div class="p-8 hidden lg:block">
      <div class="inline-grid grid-cols-8 gap-0.5 text-sm">
        {/* Headers */}
        {
          headers.map((head) => (
            <div key={head} class="bg-orange p-2 text-center text-sm md:text-lg lg:text-xl font-bold uppercase">
              {head}
            </div>
          ))
        }

        {/* Calendar Grid */}
        {
          timeSlots.map((slot) => (
            <>
              {/* Time column */}
              <div class="bg-[#F5E6D3] p-1 border border-gray-200 flex items-center justify-center">
                <div class="font-bold text-xs md:text-base lg:text-lg">{slot.time}</div>
              </div>

              {/* Days */}
              {days.map((day) => {
                const daySchedule = calendar[day]

                if (typeof daySchedule === 'string') {
                  return (
                    <div key={`${day}-${slot.time}`} class="bg-[#F5E6D3] p-1 border border-gray-200 flex items-center justify-center">
                      <span class="font-bold text-red-600">{daySchedule}</span>
                    </div>
                  )
                }

                const classInfo = daySchedule.find((item: CalendarClass) => item.time === slot.time)

                return (
                  <div key={`${day}-${slot.time}`} class="bg-[#F5E6D3] p-1 border border-gray-200 flex items-center justify-center">
                    {classInfo && (
                      <div class="flex text-center rounded-full border border-orange px-1.5 py-0.5">
                        <span class="font-bold text-xs md:text-sm lg:text-base">{classInfo.class}</span>
                      </div>
                    )}
                  </div>
                )
              })}
            </>
          ))
        }
      </div>
    </div>
    {/* Mobile */}
    <div class="pt-8 sm:p-8 lg:hidden flex flex-col gap-6">
      <div class="inline-grid grid-cols-6 gap-0.5 text-sm">
        {/* Headers */}
        {
          headers.slice(0, 6).map((head) => (
            <div key={head} class="bg-orange p-2 text-center sm:text-lg md:text-xl font-bold uppercase">
              {head === 'Horario' ? 'Hora' : head}
            </div>
          ))
        }

        {/* Calendar Grid */}
        {
          timeSlots.map((slot) => (
            <>
              {/* Time column */}
              <div class="bg-[#F5E6D3] p-1 border border-gray-200 flex items-center justify-center">
                <div class="font-bold sm:text-base md:text-lg">{slot.time}</div>
              </div>

              {/* Days */}
              {days.slice(0, 5).map((day) => {
                // console.log(day)
                const daySchedule = calendar[day]

                if (typeof daySchedule === 'string') {
                  return (
                    <div key={`${day}-${slot.time}`} class="bg-[#F5E6D3] p-1 border border-gray-200 flex items-center justify-center">
                      <span class="font-bold text-red-600">{daySchedule}</span>
                    </div>
                  )
                }

                const classInfo = daySchedule.find((item: CalendarClass) => item.time === slot.time)

                return (
                  <div key={`${day}-${slot.time}`} class="bg-[#F5E6D3] p-1 border border-gray-200 flex items-center justify-center">
                    {classInfo && (
                      <div class="flex text-center rounded-full border border-orange px-1.5 py-0.5">
                        <span class="font-bold text-ss sm:text-xs md:text-base">
                          {classInfo.class === 'Entrenamiento Funcional' ? 'Entr. Funcional' : classInfo.class}
                        </span>
                      </div>
                    )}
                  </div>
                )
              })}
            </>
          ))
        }
      </div>
      <div class="text-end text-xl text-orange">SÃ¡bado y Domingo: Cerrado</div>
    </div>
  </div>
</section>
